@page "/imageviewer"
@inject IJSRuntime JSRuntime
@inject IImageProcessor ImageProcessor
@using System.Diagnostics
@using Blazor.ImageServer.Interface
@using Blazor.ImageServer.Class
<h3>ImageViewer</h3>
<table class="table">
    <tr>
        <td>
            <strong>Coords</strong>
        </td>
        <td>
            (@myRect.drawX, @myRect.drawY, @(myRect.drawX + myRect.width), @(myRect.drawY+ myRect.height))
        </td>
        <td>
        </td>
    </tr>
    <tr>
        <td>
            <strong>Size</strong>
        </td>
        <td>
            @myRect.width x @myRect.height
        </td>
        <td>
            <button id="btnSubmit" class="btn btn-primary" @onclick=SubmitSelection>Submit Selection</button>
        </td>
    </tr>
</table>
<img id="BaseImage" src="/sample-data/malaria.png"
     @onpointerdown=PointerDown
     @onpointerdown:preventDefault
     @onpointerup=PointerUp @onpointerup:preventDefault
     @onpointermove=PointerMove @onpointermove:preventDefault
     style="position:absolute;z-index:1;" />
@if (myRect.display)
{
    <svg width="960" height="960" style="position: absolute; z-index: 2;"
         @onpointerdown=PointerDown @onpointerdown:preventDefault
         @onpointerup=PointerUp @onpointerup:preventDefault
         @onpointermove=PointerMove @onpointermove:preventDefault>
        <rect x="@myRect.drawX" y="@myRect.drawY" width="@myRect.width" height="@myRect.height" style="fill:transparent;stroke-width:3;stroke:rgb(237, 255, 0)" />
    </svg>
}

@code{
    public class rect
    {
        public bool display { get; set; }
        public double x { get; set; }
        public double y { get; set; }
        public double drawX { get; set; }
        public double drawY { get; set; }
        public double width { get; set; }
        public double height { get; set; }
    }
    public class offsets
    {
        public double x { get; set; }
        public double y { get; set; }
    }
    private offsets imageOffsets { get; set; }

    rect myRect = new rect();
    bool mouseDown = false;

    ElementReference BaseImage;

    async Task PointerDown(PointerEventArgs e)
    {
        imageOffsets = await JSRuntime.InvokeAsync<offsets>("ImageViewer.getOffsets", "BaseImage");
        mouseDown = true;
        myRect.display = true;
        myRect.x = e.ClientX - imageOffsets.x;
        myRect.y = e.ClientY - imageOffsets.y;
        myRect.drawX = myRect.x;
        myRect.drawY = myRect.y;
        myRect.width = 2;
        myRect.height = 2;
        StateHasChanged();
        return;
    }

    Task PointerUp(PointerEventArgs e)
    {
        mouseDown = false;
        return Task.CompletedTask;
    }

    Task PointerMove(PointerEventArgs e)
    {
        if (mouseDown)
        {
            Debug.WriteLine($"ClientX/Y: {e.ClientX}/{e.ClientY} | myRectX/Y: {myRect.x}/{myRect.y} | imageOffsetsX/Y: {imageOffsets.x}/{imageOffsets.y}");
            myRect.width = e.ClientX > (myRect.x + imageOffsets.x) ? e.ClientX - myRect.x - imageOffsets.x : (myRect.x + imageOffsets.x) - e.ClientX;
            myRect.height = e.ClientY > (myRect.y + imageOffsets.y) ? e.ClientY - myRect.y - imageOffsets.y : (myRect.y + imageOffsets.y) - e.ClientY;
            myRect.drawX = Math.Min(myRect.x, (e.ClientX - imageOffsets.x));
            myRect.drawY = Math.Min(myRect.y, (e.ClientY - imageOffsets.y));
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    async Task SubmitSelection()
    {
        var selection = new ImageSelection
        {
            BaseImagePath = "wwwroot/sample-data/malaria.png",
            X = myRect.drawX,
            Y = myRect.drawY,
            Width = myRect.width,
            Height = myRect.height
        };
        await ImageProcessor.SubmitSelection(selection);
    }
}
